<?//*************************************************************************//**************************** ATIServer ***********************************//************** The coolest PHP webserver ever written. *******************//*************************************************************************logMessage("ATIServer Starting Up...");//****************************** Basic Prechecks ****************************if(phpversion() < 5) logMessage('You need PHP version 5 or higher to run ATIServer - Current version is '.phpversion(),'fatal');//****************************** Variable Init ******************************define('_root', substr(__FILE__,0,-23)); //Yes - this is lame too... But it works!//****************************** Basic Init *********************************require _root.'/serv/conf/settings.atii';set_time_limit(0); 		//Supposedly defaults to zero in CLI PHP, but just to make sure...$pcntl = extension_loaded('pcntl');//************************* Bind Main Server Socket *************************foreach($_SERVER['argv'] as $key=>$val) {	$arg = explode('=',$val);	if($arg[0] == '-port') $serverPort = $arg[1];}if(!$serverPort) $serverPort = $GLOBALS['prefs']['port'];if(!$serverMode) $serverMode = $GLOBALS['prefs']['mode'];$serverSocket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);	// Create a TCP Stream socket socket_setopt($serverSocket, SOL_SOCKET, SO_REUSEADDR, 1);		// Socket is Reusablesocket_bind($serverSocket, 0, $serverPort) or logMessage("ATIServer Failed to start: socket_bind failed",'fatal'); //Bind the socket to an address/portsocket_listen($serverSocket); 									// Start listening for connections //**************************** ATIServer Now Running! *************************logMessage('ATIServer Now Running in '.($pcntl ? 'multithreading' : 'linear').' mode on port # '.$serverPort.'');//********************* Advanced Multithreading Mode *********************if($pcntl) {		require_once '_includes/pcntl.atii';		while (1) {		$_SERVER['socket'] = socket_accept($serverSocket); //Wait for a socket (binding)				while(count($GLOBALS['server']['children']) >= $GLOBALS['prefs']['maxThreadedChildren']) sleep(1); //Unlike Apache, which just DIES, we elegantly make sure we never spawn too many child processes at once :-)				$pid=pcntl_fork();  //dispatch child to handle incoming http request		if(!$pid) {			require_once '_includes/core.atii';			require_once '_includes/server.atii';			processRequest();  //we are child		}	}}//***************************** Linear Mode ******************************else {		require_once '_includes/core.atii';	require_once '_includes/server.atii';	require_once '_includes/linear.atii';		while (1) {		$_SERVER['socket'] = socket_accept($serverSocket); 	//Wait for a socket (binding)		try { processRequest(); }								//Now WHY doesn't PHP have a GOTO - or even a BREAK TO... WHY??????		catch(Exception $e) { resetRequest(); } 				//Yes - I know this is lame... But it works!	}}//************************ Basic Server Functions ************************function logMessage($message,$messageType='') {	if($messageType == 'fatal') die(time().'-fatal: '.$message."\n");	else if ($messageType == 'debug') {		if($GLOBALS['prefs']['debugMode'] == true) print(time().': Debug Message: '.$message."\n");	}	else print(time().': '.$message."\n");}?>